{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "adminPassword": {
            "type": "SecureString",
            "metadata": {
                "description": "Password for the Virtual Machine."
            }
        },
        "prefix": {
            "type": "String",
            "defaultValue": "00GTWS1CGFL001",
            "metadata": {
                "description": "Prefix for VMs, ex 00GTWS1CGFL001 or 20GTWS1CGFL002"
            }
        },
        "vNetResourceGroup": {
            "type": "String",
            "metadata": {
                "description": "Name of the Resource Group of the VNET (e.g. CUDA-RG-VNET)"
            }
        },
        "vNetName": {
            "type": "String",
            "metadata": {
                "description": "Name of the VNET (e.g. CUDA-VNET)"
            }
        },
        "subnetNameCGF": {
            "type": "String",
            "metadata": {
                "description": "Name of the Subnet containing the CloudGen Firewall (e.g. CUDA-SUBNET-CGF)"
            }
        },
        "subnetCGF": {
            "type": "String",
            "metadata": {
                "description": "Network range of the Subnet containing the CloudGen Firewall (e.g. 172.16.136.0/24)"
            }
        },
    "availabilityZone": {
      "type": "string",
      "metadata": {
        "description": "Availability zone (AZ) number (1, 2, or 3)"
      },
      "allowedValues": [
        "1", "2", "3"
      ]
    },
        "ipAddressCGF": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "OPTIONAL IP Address of the CloudGen Firewall (e.g. 172.16.136.0/24). If not filled we will use the first private IP in the subnet"
            }
        },
        "imageSKU": {
            "defaultValue": "byol",
            "allowedValues": [
                "hourly",
                "byol"
            ],
            "type": "String",
            "metadata": {
                "description": "SKU Hourly (PAYG) or BYOL (Bring your own license)"
            }
        },
        "version": {
            "defaultValue": "8.0.5034101",
            "allowedValues": [
                "latest",
                "8.0.5034101",
                "8.0.4021801",
                "8.0.3013701",
                "8.0.2011901",
                "8.0.1037602",
                "8.0.0047504",
                "7.2.5013201"
            ],
            "type": "String",
            "metadata": {
                "description": "Version of the Barracuda CloudGen Firewall to install"
            }
        },
        "vmSize": {
            "defaultValue": "Standard_F8s_v2",
            "allowedValues": [
                "Standard_DS1_v2",
                "Standard_DS2_v2",
                "Standard_DS3_v2",
                "Standard_DS4_v2",
                "Standard_DS8_v2",
                "Standard_D2_v3",
                "Standard_D4_v3",
                "Standard_D8_v3",
                "Standard_D2S_v3",
                "Standard_D4S_v3",
                "Standard_D8S_v3",
                "Standard_F1s",
                "Standard_F2s",
                "Standard_F4s",
                "Standard_F8s",
                "Standard_F8s_v2",
                "Standard_D1_v2",
                "Standard_D2_v2",
                "Standard_D3_v2",
                "Standard_D4_v2",
                "Standard_D2_v3",
                "Standard_D4_v3",
                "Standard_D8_v3",
                "Standard_D2_v4",
                "Standard_D4_v4",
                "Standard_D8_v4",
                "Standard_D2s_v4",
                "Standard_D4s_v4",
                "Standard_D8s_v4"
            ],
            "type": "String",
            "metadata": {
                "description": "Size of the VMs to be created"
            }
        },
        "ccManaged": {
            "defaultValue": "no",
            "allowedValues": [
                "yes",
                "no"
            ],
            "type": "String"
        },
        "ccClusterName": {
            "defaultValue": "only used when ccManaged set to yes",
            "type": "String"
        },
        "ccRangeId": {
            "defaultValue": "only used when ccManaged set to yes",
            "type": "String"
        },
        "ccIpAddress": {
            "defaultValue": "only used when ccManaged set to yes",
            "type": "String"
        },
        "ccSecret": {
            "defaultValue": "only used when ccManaged set to yes",
            "type": "SecureString"
        }
    },
    "variables": {
        "computeApiVersion": "2017-03-30",
        "networkApiVersion": "2017-08-01",
        "imagePublisher": "barracudanetworks",
        "imageOffer": "barracuda-ng-firewall",
        "vnetID": "[resourceId(parameters('vNetResourceGroup'),'Microsoft.Network/virtualNetworks',parameters('vNetName'))]",
        "subnetRefCGF": "[concat(variables('vnetID'),'/subnets/',parameters('subnetNameCGF'))]",
        "cgfVmName": "[concat(parameters('prefix'),'-SA')]",
        "cgfNicName": "[concat(variables('cgfVmName'),'-NIC')]",
        "nsgName": "[concat(variables('cgfVmName'),'-NSG')]",
        "cgfPIPAddressName": "[concat(variables('cgfVmName'),'-PIP')]",
        "cgfPIPAddressType": "Static",
        "adminUsername": "notused",
        "cgfSubnetSplit": "[split( parameters( 'subnetCGF' ), '/' )]",
        "cgfSubnetAddrSplit": "[split( variables( 'cgfSubnetSplit' )[0], '.' )]",
        "cgfSubnetMask": "[variables( 'cgfSubnetSplit' )[1]]",
        "cgfSubnetDefaultGw": "[concat( variables( 'cgfSubnetAddrSplit' )[0], '.', variables( 'cgfSubnetAddrSplit' )[1], '.', variables( 'cgfSubnetAddrSplit' )[2], '.', add( int( variables( 'cgfSubnetAddrSplit' )[3]), 1 ))]",
        "cgfVmAddressCalc": "[concat( variables( 'cgfSubnetAddrSplit' )[0], '.', variables( 'cgfSubnetAddrSplit' )[1], '.', variables( 'cgfSubnetAddrSplit' )[2], '.', add( int( variables( 'cgfSubnetAddrSplit' )[3]), 10 ))]",
        "cgfVmAddress": "[if(empty('ipAddressCGF'), variables('cgfVmAddressCalc'), parameters('ipAddressCGF'))]",
        "cgfCustomData": "[Base64(concat( '#!/bin/bash\n\n/opb/cloud-setmip ', variables('cgfVmAddress'), ' ', variables( 'cgfSubnetMask' ), ' ', variables( 'cgfSubnetDefaultGw' ), '\n'))]",
        "cgfCustomDataCC": "[base64(concat('#!/bin/bash\n\n', 'echo \"*/5 * * * * root if /usr/bin/test -f /opt/phion/update/box.par.last; then echo \\\"found par.last\\\" >> /tmp/getpar.log; rm /etc/cron.d/getpar; else echo \\\"', parameters( 'ccSecret' ), '\\\" | /opt/phion/bin/getpar -a ', parameters('ccIpAddress'), ' -r ', parameters( 'ccRangeId' ), ' -c ', parameters( 'ccClusterName' ), ' -b ', variables( 'cgfVmName' ), ' -d /opt/phion/update/box.par -s --verbosity 10 >> /tmp/getpar.log; /usr/sbin/reboot; fi\" > /etc/cron.d/getpar\n'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "[variables('networkApiVersion')]",
            "name": "[variables('nsgName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "AllowAnyInbound",
                        "properties": {
                            "description": "Allow Any",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "1-65535",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowAnyOutbound",
                        "properties": {
                            "description": "Allow Any",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "1-65535",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Outbound"
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('cgfPIPAddressName')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "standard"
            },
            "properties": {
                "publicIPAllocationMethod": "[variables('cgfPIPAddressType')]"
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "[variables('networkApiVersion')]",
            "name": "[variables('cgfNicName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('nsgName'))]",
                "[concat('Microsoft.Network/publicIPAddresses/', variables('cgfPIPAddressName'))]"
            ],
            "properties": {
                "enableIPForwarding": true,
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                },
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[variables( 'cgfVmAddress' )]",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('cgfPIPAddressName'))]"
                            },
                            "subnet": {
                                "id": "[variables('subnetRefCGF')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "[variables('computeApiVersion')]",
            "zones": [
                "[parameters('availabilityZone')]"
            ],
            "name": "[variables('cgfVmName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces/', variables('cgfNicName'))]"
            ],
            "plan": {
                "name": "[parameters('imageSKU')]",
                "Product": "[variables('imageOffer')]",
                "Publisher": "[variables('imagePublisher')]"
            },
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('vmSize')]"
                },
                "osProfile": {
                    "computerName": "[variables('cgfVmName')]",
                    "adminUsername": "[variables('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]",
                    "customData": "[if(equals(parameters('ccManaged'), 'yes'), variables('cgfCustomDataCC'), variables('cgfCustomData'))]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('imagePublisher')]",
                        "offer": "[variables('imageOffer')]",
                        "sku": "[parameters('imageSKU')]",
                        "version": "[parameters('version')]"
                    },
                    "osDisk": {
                        "name": "[concat(variables('cgfVmName'),'-osdisk')]",
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('cgfNicName'))]",
                            "properties": {
                                "primary": true
                            }
                        }
                    ]
                }
            }
        }
    ],
    "outputs": {
        "ipaddress": {
            "type": "String",
            "value": "[reference(variables('cgfPIPAddressName')).ipAddress]"
        }
    }
}
